===============================================================================
                    HOTEL MOTEL ECLIPSE - API DOCUMENTATION
                         GU√çA COMPLETA PARA FRONTEND
===============================================================================

üåê BASE URL PRODUCCI√ìN: https://eclipse-backend-so8x.onrender.com
üåê BASE URL DESARROLLO: http://127.0.0.1:8000

===============================================================================
                              üîë AUTENTICACI√ìN
===============================================================================

üìå HEADERS GLOBALES PARA REQUESTS AUTENTICADOS:
Content-Type: application/json
Authorization: Bearer {JWT_TOKEN}

üìå FORMATO DE FECHA Y HORA:
- Zona horaria: America/Bogota (UTC-05:00)
- Formato: YYYY-MM-DDThh:mm:ss-05:00
- Ejemplo: "2025-08-29T15:30:00-05:00" (3:30 PM hora Colombia)
- Use formato 24 horas (00:00 a 23:59)

üìå TIPOS DE PERMISOS:
- üü¢ P√öBLICO: Sin autenticaci√≥n
- üîí JWT: Requiere token JWT v√°lido
- üõ°Ô∏è RECEPCIONISTA+: Recepcionista, Admin o Super Admin
- üëë ADMIN+: Admin o Super Admin solamente
- üî± SUPER ADMIN: Solo Super Administrador

===============================================================================
                            üîê AUTENTICACI√ìN Y SETUP
===============================================================================

1. CREAR SUPER ADMIN (SETUP INICIAL) - üü¢ P√öBLICO
   POST /api/accounts/create-super-admin/
   
   BODY:
   {
       "username": "superadmin",
       "email": "superadmin@moteleclipse.com",
       "password": "SuperAdmin123!",
       "first_name": "Super",
       "last_name": "Administrador",
       "phone": "+1234567890"
   }

2. LOGIN JWT - üü¢ P√öBLICO
   POST /api/accounts/jwt/login/
   
   BODY:
   {
       "username": "tu_usuario",
       "password": "tu_contrase√±a"
   }
   
   RESPUESTA:
   {
       "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
       "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
   }

3. REFRESH TOKEN - üü¢ P√öBLICO
   POST /api/accounts/jwt/refresh/
   
   BODY:
   {
       "refresh": "tu_refresh_token"
   }

4. LOGOUT - üîí JWT
   POST /api/accounts/logout/
   
   BODY: {} (vac√≠o)

===============================================================================
                            üë• GESTI√ìN DE USUARIOS
===============================================================================

5. CREAR ADMINISTRADOR - üî± SUPER ADMIN
   POST /api/accounts/usuarios/create_admin/
   
   BODY:
   {
       "username": "admin_hotel",
       "email": "admin@moteleclipse.com",
       "password": "AdminHotel123!",
       "password_confirm": "AdminHotel123!",
       "first_name": "Juan",
       "last_name": "P√©rez",
       "phone": "+1234567891"
   }

6. CREAR RECEPCIONISTA - üëë ADMIN+
   POST /api/accounts/usuarios/create_receptionist/
   
   BODY:
   {
       "username": "recepcionista1",
       "email": "recepcion@moteleclipse.com",
       "password": "Recepcion123!",
       "password_confirm": "Recepcion123!",
       "first_name": "Mar√≠a",
       "last_name": "Gonz√°lez",
       "phone": "+1234567892"
   }

7. LISTAR USUARIOS - üëë ADMIN+
   GET /api/accounts/usuarios/
   
   NO BODY (solo GET)

8. VER USUARIO ESPEC√çFICO - üëë ADMIN+
   GET /api/accounts/usuarios/{id}/
   
   NO BODY (solo GET)

9. ACTUALIZAR USUARIO - üëë ADMIN+
   PUT /api/accounts/usuarios/{id}/
   
   BODY:
   {
       "username": "usuario_actualizado",
       "email": "nuevo_email@example.com",
       "first_name": "Nuevo Nombre",
       "last_name": "Nuevo Apellido",
       "phone": "+0987654321",
       "role": "receptionist"
   }

10. ELIMINAR USUARIO - üëë ADMIN+
    DELETE /api/accounts/usuarios/{id}/
    
    NO BODY (solo DELETE)

11. LISTAR RECEPCIONISTAS - üëë ADMIN+
    GET /api/accounts/usuarios/list_receptionists/
    
    NO BODY (solo GET)

12. VER PERFIL PROPIO - üîí JWT
    GET /api/accounts/profile/
    
    NO BODY (solo GET)

===============================================================================
                            üè† GESTI√ìN DE HABITACIONES
===============================================================================

üìå SISTEMA DE PRECIOS Y HORAS:
- precio_base: Costo fijo inicial de la habitaci√≥n (ej: 40,000 COP)
- horas_base: Cantidad de horas incluidas en el precio base (ej: 3 horas)
- precio_hora_adicional: Costo por cada hora extra (ej: 5,000 COP)
- cobro_adicional: Indica si se aplican cobros por horas extras

Ejemplo de c√°lculo:
- Precio base: 40,000 COP (incluye 3 horas)
- Uso por 5 horas = 40,000 + (2 horas extra √ó 5,000) = 50,000 COP

üåü SISTEMA DE AUTO-CARGA DE DATOS POR TIPO (ACTUALIZADO):
Cuando selecciones un tipo de habitaci√≥n, el sistema autom√°ticamente carga:
- precio_base del tipo seleccionado
- precio_hora_adicional del tipo seleccionado  
- descripcion predeterminada del tipo
- Configuraci√≥n est√°ndar de horas y cobros adicionales

12A. CREAR TIPO DE HABITACI√ìN - üëë ADMIN+
     POST /api/rooms/tipos/
     
     BODY:
     {
         "name": "suite ejecutiva premium",
         "description": "Habitaci√≥n de lujo con todas las comodidades",
         "precio_base": 200000,
         "precio_hora_adicional": 8000
     }
     
     RESPUESTA EXITOSA (201):
     {
         "id": 3,
         "name": "suite ejecutiva premium", 
         "description": "Habitaci√≥n de lujo con todas las comodidades",
         "precio_base": "200000.00",
         "precio_hora_adicional": "8000.00",
         "created_at": "2025-08-30T04:55:00Z"
     }

12B. OBTENER DATOS DE AUTOCOMPLETADO - üõ°Ô∏è RECEPCIONISTA+
     GET /api/rooms/tipos/{id}/datos_autocompletado/
     
     RESPUESTA EXITOSA (200):
     {
         "id": 3,
         "name": "suite ejecutiva premium",
         "precio_base": 200000,
         "descripcion": "Habitaci√≥n de lujo con todas las comodidades",
         "datos_predeterminados": {
             "precio_base": 200000,
             "precio_hora_adicional": 8000,
             "descripcion": "Habitaci√≥n de lujo con todas las comodidades",
             "horas_base": 5,
             "cobro_adicional": true,
             "estado": "disponible"
         }
     }

13. CREAR HABITACI√ìN CON AUTO-CARGA - üëë ADMIN+
    POST /api/rooms/
    
    BODY (sistema optimizado con auto-carga autom√°tica):
    {
        "numero": "105",
        "tipo_habitacion": 3,           // ID del tipo de habitaci√≥n creado
        "estado": "disponible"
    }
    
    RESPUESTA EXITOSA (201) EN ESPA√ëOL:
    {
        "id": 4,
        "numero": "105",
        "estado": "disponible",
        "disponible": true,
        "fecha_creacion": "2025-08-30T04:55:00Z",
        
        "tipo_habitacion": {
            "id": 3,
            "nombre": "suite ejecutiva premium",
            "descripcion": "Habitaci√≥n de lujo con todas las comodidades"
        },
        
        "configuracion_precios": {
            "precio_base": 200000.0,           // AUTO-CARGADO del tipo
            "precio_hora_adicional": 8000.0,   // AUTO-CARGADO del tipo  
            "horas_incluidas": 3,              // Valor por defecto
            "cobra_horas_extras": true         // Valor por defecto
        }
    }

14. LISTAR TIPOS DE HABITACI√ìN - üõ°Ô∏è RECEPCIONISTA+
    GET /api/rooms/tipos/
    
    NO BODY (solo GET)

15. LISTAR HABITACIONES - üõ°Ô∏è RECEPCIONISTA+
    GET /api/rooms/
    
    NO BODY (solo GET)

16. ACTUALIZAR HABITACI√ìN - üõ°Ô∏è RECEPCIONISTA+
    PUT /api/rooms/{id}/
    
    BODY:
    {
        "numero": "101",
        "tipo_habitacion": 1,
        "estado": "disponible",
        "precio_base": 40000,           // precio fijo inicial en pesos colombianos
        "precio_hora_adicional": 5000,   // precio por cada hora extra en pesos colombianos
        "descripcion": "Habitaci√≥n con vista al jard√≠n",
        "politica_horas": {
            "horas_base": 3,            // cantidad de horas incluidas en el precio base
            "cobro_adicional": true      // indica si se cobra por horas adicionales
        }
    }

17. ACTUALIZACI√ìN PARCIAL - üõ°Ô∏è RECEPCIONISTA+
    PATCH /api/rooms/{id}/
    
    BODY:
    {
        "estado": "disponible",   // valores posibles: "disponible", "ocupada", "limpieza"
        "registrado_por": "recepcionista1", // nombre de usuario del recepcionista
        "fecha_registro": "2025-08-29T09:30:00-05:00" // formato: YYYY-MM-DDThh:mm:ss-05:00 (hora Bogot√°)
    }

18. CAMBIAR ESTADO HABITACI√ìN - üõ°Ô∏è RECEPCIONISTA+
    POST /api/rooms/{id}/change_status/
    
    BODY:
    {
        "estado": "limpieza",   // valores posibles: "disponible", "ocupada", "limpieza"
        "registrado_por": "recepcionista1", // nombre de usuario del recepcionista
        "fecha_registro": "2025-08-29T09:35:00-05:00" // formato: YYYY-MM-DDThh:mm:ss-05:00 (hora Bogot√°)
    }

19. ELIMINAR HABITACI√ìN - üëë ADMIN+
    DELETE /api/rooms/{id}/
    
    NO BODY (solo DELETE)

20. HABITACIONES DISPONIBLES - üõ°Ô∏è RECEPCIONISTA+
    GET /api/rooms/disponibles/
    
    NO BODY (solo GET)

21. DASHBOARD HABITACIONES - üõ°Ô∏è RECEPCIONISTA+
    GET /api/rooms/dashboard/
    
    NO BODY (solo GET)

===============================================================================
                           üè∑Ô∏è TIPOS DE HABITACI√ìN
===============================================================================

22. LISTAR TIPOS DE HABITACI√ìN - üëë ADMIN+
    GET /api/rooms/tipos/
    
    NO BODY (solo GET)

23. CREAR TIPO DE HABITACI√ìN - üëë ADMIN+
    POST /api/rooms/tipos/
    
    BODY:
    {
        "nombre": "Suite Ejecutiva",
        "descripcion": "Habitaci√≥n amplia con sala de estar",
        "precio_base": 200.00,
        "capacidad": 4,
        "amenidades": "WiFi, TV, Minibar, Aire Acondicionado"
    }

24. VER TIPO ESPEC√çFICO - üëë ADMIN+
    GET /api/rooms/tipos/{id}/
    
    NO BODY (solo GET)

25. ACTUALIZAR TIPO - üëë ADMIN+
    PUT /api/rooms/tipos/{id}/
    
    BODY:
    {
        "nombre": "Suite Premium",
        "descripcion": "Habitaci√≥n de lujo con jacuzzi",
        "precio_base": 250.00,
        "capacidad": 2,
        "amenidades": "WiFi, TV 55', Minibar, Jacuzzi, Vista panor√°mica"
    }

26. ELIMINAR TIPO - üëë ADMIN+
    DELETE /api/rooms/tipos/{id}/
    
    NO BODY (solo DELETE)

===============================================================================
                            üì¶ GESTI√ìN DE INVENTARIO
===============================================================================

27. LISTAR PRODUCTOS - üîí JWT
    GET /api/inventory/productos/
    
    NO BODY (solo GET)

28. CREAR PRODUCTO - üîí JWT
    POST /api/inventory/productos/
    
    BODY:
    {
        "name": "Toallas de ba√±o",
        "description": "Toallas de algod√≥n 100%",
        "category": 1,
        "sku": "TOW-001",
        "current_stock": 50,
        "min_stock": 10,
        "max_stock": 100,
        "unit_price": 15.99,
        "supplier": "Textiles SA"
    }

29. VER PRODUCTO ESPEC√çFICO - üîí JWT
    GET /api/inventory/productos/{id}/
    
    NO BODY (solo GET)

30. ACTUALIZAR PRODUCTO - üîí JWT
    PUT /api/inventory/productos/{id}/
    
    BODY:
    {
        "name": "Toallas premium",
        "description": "Toallas de algod√≥n egipcio",
        "category": 1,
        "sku": "TOW-001",
        "current_stock": 45,
        "min_stock": 15,
        "max_stock": 120,
        "unit_price": 18.99,
        "supplier": "Textiles Premium SA"
    }

31. ELIMINAR PRODUCTO - üîí JWT
    DELETE /api/inventory/productos/{id}/
    
    NO BODY (solo DELETE)

===============================================================================
                            üè∑Ô∏è CATEGOR√çAS DE INVENTARIO
===============================================================================

32. LISTAR CATEGOR√çAS - üîí JWT
    GET /api/inventory/categorias/
    
    NO BODY (solo GET)

33. CREAR CATEGOR√çA - üîí JWT
    POST /api/inventory/categorias/
    
    BODY:
    {
        "name": "Textiles",
        "description": "Productos textiles para habitaciones",
        "code": "TXT"
    }

34. VER CATEGOR√çA ESPEC√çFICA - üîí JWT
    GET /api/inventory/categorias/{id}/
    
    NO BODY (solo GET)

35. ACTUALIZAR CATEGOR√çA - üîí JWT
    PUT /api/inventory/categorias/{id}/
    
    BODY:
    {
        "name": "Textiles Premium",
        "description": "Productos textiles de alta calidad",
        "code": "TXTP"
    }

36. ELIMINAR CATEGOR√çA - üîí JWT
    DELETE /api/inventory/categorias/{id}/
    
    NO BODY (solo DELETE)

===============================================================================
                           üìä MOVIMIENTOS DE STOCK
===============================================================================

37. LISTAR MOVIMIENTOS - üîí JWT
    GET /api/inventory/movimientos-stock/
    
    NO BODY (solo GET)

38. CREAR MOVIMIENTO - üîí JWT
    POST /api/inventory/movimientos-stock/
    
    BODY:
    {
        "product": 1,
        "movement_type": "IN",
        "quantity": 20,
        "reason": "Compra nueva",
        "reference": "ORD-001",
        "notes": "Recibido en buen estado"
    }

39. VER MOVIMIENTO ESPEC√çFICO - üîí JWT
    GET /api/inventory/movimientos-stock/{id}/
    
    NO BODY (solo GET)

40. ACTUALIZAR MOVIMIENTO - üîí JWT
    PUT /api/inventory/movimientos-stock/{id}/
    
    BODY:
    {
        "product": 1,
        "movement_type": "OUT",
        "quantity": 5,
        "reason": "Uso en habitaci√≥n 101",
        "reference": "USE-001",
        "notes": "Consumo normal"
    }

41. ELIMINAR MOVIMIENTO - üîí JWT
    DELETE /api/inventory/movimientos-stock/{id}/
    
    NO BODY (solo DELETE)

===============================================================================
                              üîß ENDPOINTS DE UTILIDAD
===============================================================================

42. HEALTH CHECK - üü¢ P√öBLICO
    GET /api/accounts/health/
    
    NO BODY (solo GET)

43. DEBUG INFO - üü¢ P√öBLICO
    GET /api/accounts/debug/
    
    NO BODY (solo GET)

44. ROOT API - üü¢ P√öBLICO
    GET /api/
    
    NO BODY (solo GET)

===============================================================================
                           üì± C√ìDIGOS DE RESPUESTA HTTP
===============================================================================

200 - OK: Solicitud exitosa
201 - CREATED: Recurso creado exitosamente
204 - NO CONTENT: Solicitud exitosa sin contenido
400 - BAD REQUEST: Error en los datos enviados
401 - UNAUTHORIZED: No autorizado (token inv√°lido/faltante)
403 - FORBIDDEN: Permisos insuficientes
404 - NOT FOUND: Recurso no encontrado
500 - INTERNAL SERVER ERROR: Error del servidor

===============================================================================
                           üö® POSIBLES ERRORES COMUNES
===============================================================================

ERROR: "No active account found with the given credentials"
CAUSA: Usuario no existe o credenciales incorrectas
SOLUCI√ìN: Verificar username/password o crear usuario

ERROR: "Token is invalid or expired"
CAUSA: JWT token expirado o malformado
SOLUCI√ìN: Hacer login nuevamente

ERROR: "You do not have permission to perform this action"
CAUSA: Rol insuficiente para la acci√≥n
SOLUCI√ìN: Usar cuenta con permisos apropiados

ERROR: "This field is required"
CAUSA: Campo obligatorio faltante en el body
SOLUCI√ìN: Incluir todos los campos requeridos

ERROR: "User with this username already exists"
CAUSA: Username duplicado
SOLUCI√ìN: Usar un username √∫nico

===============================================================================
                            üìã FLUJO DE TRABAJO T√çPICO
===============================================================================

1. SETUP INICIAL (Una sola vez):
   - Crear super admin
   - Crear administradores
   - Crear recepcionistas

2. AUTENTICACI√ìN:
   - Login con credenciales
   - Guardar access token
   - Usar token en headers para requests

3. GESTI√ìN DIARIA:
   - Ver habitaciones disponibles
   - Cambiar estados de habitaciones
   - Gestionar inventario
   - Ver reportes

4. ADMINISTRACI√ìN:
   - Crear/editar habitaciones
   - Gestionar tipos de habitaci√≥n
   - Crear usuarios
   - Gestionar categor√≠as

===============================================================================
                      üî• EJEMPLOS DE C√ìDIGO FRONTEND (JAVASCRIPT)
===============================================================================

üí° IMPLEMENTACI√ìN DE AUTO-CARGA DE HABITACIONES

// 1. Funci√≥n para cargar tipos de habitaci√≥n
async function cargarTiposHabitacion() {
    const response = await fetch('/api/habitaciones/tipos/', {
        headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
    });
    return response.json();
}

// 2. Funci√≥n para obtener datos de autocompletado
async function obtenerDatosAutocompletado(tipoId) {
    const response = await fetch(`/api/habitaciones/tipos/${tipoId}/datos_autocompletado/`, {
        headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
    });
    return response.json();
}

// 3. Manejador de cambio de tipo de habitaci√≥n
const onTipoHabitacionChange = async (tipoId) => {
    try {
        const datos = await obtenerDatosAutocompletado(tipoId);
        
        // Auto-completar formulario
        document.getElementById('precio_base').value = datos.datos_predeterminados.precio_base;
        document.getElementById('precio_hora_adicional').value = datos.datos_predeterminados.precio_hora_adicional;
        document.getElementById('descripcion').value = datos.datos_predeterminados.descripcion;
        document.getElementById('horas_base').value = datos.datos_predeterminados.horas_base;
        document.getElementById('cobro_adicional').checked = datos.datos_predeterminados.cobro_adicional;
        
        // Mostrar mensaje de confirmaci√≥n
        console.log(`Datos cargados autom√°ticamente para tipo: ${datos.display_name}`);
        
    } catch (error) {
        console.error('Error al cargar datos de autocompletado:', error);
    }
};

// 4. Funci√≥n para crear habitaci√≥n con auto-carga
async function crearHabitacionConAutoCarga(formData) {
    const response = await fetch('/api/habitaciones/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({
            ...formData,
            auto_cargar_datos: true  // Habilitar auto-carga en backend
        })
    });
    
    if (response.ok) {
        const habitacion = await response.json();
        console.log('Habitaci√≥n creada exitosamente:', habitacion);
        return habitacion;
    } else {
        const error = await response.json();
        console.error('Error al crear habitaci√≥n:', error);
        throw error;
    }
}

// 5. Ejemplo completo de uso en formulario
document.addEventListener('DOMContentLoaded', async () => {
    // Cargar tipos de habitaci√≥n al inicializar
    const tipos = await cargarTiposHabitacion();
    const selectTipo = document.getElementById('tipo_habitacion');
    
    tipos.results.forEach(tipo => {
        const option = document.createElement('option');
        option.value = tipo.id;
        option.textContent = tipo.display_name;
        selectTipo.appendChild(option);
    });
    
    // Configurar evento de cambio de tipo
    selectTipo.addEventListener('change', (e) => {
        if (e.target.value) {
            onTipoHabitacionChange(e.target.value);
        }
    });
    
    // Configurar env√≠o de formulario
    document.getElementById('form-habitacion').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = {
            numero: document.getElementById('numero').value,
            tipo_habitacion: parseInt(document.getElementById('tipo_habitacion').value),
            piso: parseInt(document.getElementById('piso').value),
            notas: document.getElementById('notas').value
        };
        
        try {
            await crearHabitacionConAutoCarga(formData);
            alert('Habitaci√≥n creada exitosamente!');
            // Redirigir o limpiar formulario
        } catch (error) {
            alert('Error al crear habitaci√≥n: ' + JSON.stringify(error));
        }
    });
});

===============================================================================
                    üöÄ FLUJO COMPLETO ACTUALIZADO - HABITACIONES
===============================================================================

üî• FLUJO OPTIMIZADO PARA CREAR HABITACIONES CON AUTO-CARGA:

1Ô∏è‚É£ CREAR TIPO DE HABITACI√ìN (Una sola vez):
   POST /api/rooms/tipos/
   {
       "name": "suite presidencial",
       "description": "Suite de lujo con todas las comodidades premium",
       "precio_base": 300000,
       "precio_hora_adicional": 10000
   }
   
   RESPUESTA: { "id": 5, "name": "suite presidencial", ... }

2Ô∏è‚É£ CREAR HABITACIONES (M√∫ltiples usando el tipo):
   POST /api/rooms/
   {
       "numero": "201",
       "tipo_habitacion": 5,        // ‚Üê ID del tipo creado
       "estado": "disponible"
   }
   
   RESPUESTA AUTOM√ÅTICA:
   {
       "id": 10,
       "numero": "201", 
       "estado": "disponible",
       "disponible": true,
       "fecha_creacion": "2025-08-30T05:00:00Z",
       
       "tipo_habitacion": {
           "id": 5,
           "nombre": "suite presidencial",
           "descripcion": "Suite de lujo con todas las comodidades premium"
       },
       
       "configuracion_precios": {
           "precio_base": 300000.0,        // ‚úÖ AUTO-CARGADO
           "precio_hora_adicional": 10000.0, // ‚úÖ AUTO-CARGADO
           "horas_incluidas": 3,           // ‚úÖ Valor por defecto
           "cobra_horas_extras": true      // ‚úÖ Valor por defecto
       }
   }

üéØ VENTAJAS DEL SISTEMA ACTUAL:
- ‚úÖ Respuesta completamente en espa√±ol
- ‚úÖ Sin campos innecesarios (piso, notas)
- ‚úÖ Sin datos duplicados
- ‚úÖ Auto-carga autom√°tica de precios del tipo
- ‚úÖ Estructura clara y organizada
- ‚úÖ F√°cil de usar desde el frontend

===============================================================================
                              üìû CONTACTO DE SOPORTE
===============================================================================

Para dudas t√©cnicas sobre la API:
- Revisar c√≥digos de error HTTP
- Verificar formato de JSON en requests
- Confirmar que headers incluyan Authorization con JWT
- Validar que el usuario tenga permisos necesarios

===============================================================================
                                üèÅ FIN DEL DOCUMENTO
===============================================================================

√öltima actualizaci√≥n: 24 de Agosto, 2025
Estado del API: ‚úÖ FUNCIONANDO
URL Producci√≥n: https://eclipse-backend-so8x.onrender.com
Versi√≥n: 1.0.0
